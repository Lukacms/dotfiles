env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: 'xterm-256color'

window:
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 15
    y: 10
  dimensions:
    columns: 0
    lines: 0
  opacity: 0.9

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Available values:
  # - full: borders and title bar
  # - none: neither borders nor title bar
  # - transparent: title bar, transparent background and title bar buttons
  # - buttonless: title bar, transparent background, but no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 1000

  # Scrolling distance multiplier.
  multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: 'JetBrains Mono Nerd Font'

    # The `style` can be specified to pick a specific face.
    style: Light

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: 'JetBrains Mono Nerd Font'

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: 'JetBrains Mono Nerd Font'

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Point size
  size: 7

  offset:
    x: 0
    y: 0

  glyph_offset:
    x: 0
    y: 0

  # When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: true

# Colors (Poimandres)
colors:
  # Tomorrow Night (https://github.com/aarowill/base16-alacritty/blob/master/colors/base16-tomorrow-night.yml)
  # Default colors
  primary:
    background: '#1d1f21'
    foreground: '#c5c8c6'
    # Bright and dim foreground colors
    dim_foreground: "#CDD6F4" # text
    bright_foreground: "#CDD6F4" # text

  cursor:
    text: '#1d1f21'
    cursor: '#c5c8c6'
    vi_mode_cursor:
      text: "#1E1E2E" # base
      cursor: "#B4BEFE" # lavender

  # Normal colors
  normal:
    black:   '#1d1f21'
    red: "#F38BA8" # red
    green: "#A6E3A1" # green
    yellow: "#F9E2AF" # yellow
    blue: "#89B4FA" # blue
    magenta: "#F5C2E7" # pink
    cyan: "#94E2D5" # teal
    white: "#BAC2DE" # subtext1
   # Bright colors
  bright:
    black:   '#969896'
    red: "#F38BA8" # red
    green: "#A6E3A1" # green
    yellow: "#F9E2AF" # yellow
    blue: "#89B4FA" # blue
    magenta: "#F5C2E7" # pink
    cyan: "#94E2D5" # teal
    white: "#A6ADC8" # subtext0
  # Dim colors
  dim:
    black: "#45475A" # surface1
    red: "#F38BA8" # red
    green: "#A6E3A1" # green
    yellow: "#F9E2AF" # yellow
    blue: "#89B4FA" # blue
    magenta: "#F5C2E7" # pink
    cyan: "#94E2D5" # teal
    white: "#BAC2DE" # subtext1

  indexed_colors:
    - { index: 16, color: "#FAB387" }
    - { index: 17, color: "#F5E0DC" }
  # Search colors
  #
  # Colors used for the search bar and match highlighting.
  search:
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    matches:
      foreground: "#1b1e28"
      background: "#add7ff"
    focused_match:
      foreground: "#1b1e28"
      background: "#add7ff"
  # Selection colors
  selection:
    text: "#add7ff"
    background: "#3a3340"

hints:
  enabled:
   - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
             [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
     hyperlinks: true
     command: xdg-open
     post_processing: true
     mouse:
       enabled: true
       mods: None
     binding:
       key: U
       mods: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

bell:
  animation: EaseOutExpo
  color: '#fffffa'
  duration: 0

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  # for tmux
  - { key: D,     mods: Alt,       chars: "\x06\x76" } # create vertical panel
  - { key: D,     mods: Alt|Shift, chars: "\x06\x73" }
  - { key: W,     mods: Alt,       chars: "\x06\x78" } # close tab / panel
  - { key: H,     mods: Alt,       chars: "\x06\x68" }
  - { key: J,     mods: Alt,       chars: "\x06\x6a" }
  - { key: K,     mods: Alt,       chars: "\x06\x6b" }
  - { key: L,     mods: Alt,       chars: "\x06\x6c" }
  - { key: T,     mods: Alt,       chars: "\x06\x63" } # create tab
  - { key: Key1,  mods: Alt,       chars: "\x06\x31" }
  - { key: Key2,  mods: Alt,       chars: "\x06\x32" }
  - { key: Key3,  mods: Alt,       chars: "\x06\x33" }
  - { key: Key4,  mods: Alt,       chars: "\x06\x34" }
  - { key: Key5,  mods: Alt,       chars: "\x06\x35" }
  - { key: Key6,  mods: Alt,       chars: "\x06\x36" }
  - { key: Key7,  mods: Alt,       chars: "\x06\x37" }
  - { key: Key8,  mods: Alt,       chars: "\x06\x38" }
  - { key: Key9,  mods: Alt,       chars: "\x06\x39" }
  - { key: Left,  mods: Alt,       chars: "\x06\x48" }
  - { key: Down,  mods: Alt,       chars: "\x06\x4a" }
  - { key: Up,    mods: Alt,       chars: "\x06\x4b" }
  - { key: Right, mods: Alt,       chars: "\x06\x4c" }

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

  vi_mode_style: Block

# Live config reload (changes require restart)
live_config_reload: true

shell:
  program: /usr/bin/bash

theme: iTerm-Default
